AWSTemplateFormatVersion: '2010-09-09'
Description: 'TaskFlow - Serverless Task Manager (Simple Deployment)'

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code
  LambdaCodeKey:
    Type: String
    Description: S3 key for Lambda function zip file
    Default: lambda-functions.zip

Resources:
  # DynamoDB Table (Free Tier Optimized)
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TodoItems
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: 
                  - !GetAtt TodoTable.Arn
                  - !Sub '${TodoTable}/index/*'

  # Lambda Functions
  CreateTodoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-CreateTodo
      Runtime: python3.9
      Handler: create-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Timeout: 10
      MemorySize: 128

  GetTodosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-GetTodos
      Runtime: python3.9
      Handler: get-todos.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Timeout: 10
      MemorySize: 128

  GetTodoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-GetTodo
      Runtime: python3.9
      Handler: get-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Timeout: 10
      MemorySize: 128

  UpdateTodoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-UpdateTodo
      Runtime: python3.9
      Handler: update-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Timeout: 10
      MemorySize: 128

  DeleteTodoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-DeleteTodo
      Runtime: python3.9
      Handler: delete-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Timeout: 10
      MemorySize: 128

  # API Gateway
  TodoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TaskFlow-API
      Description: TaskFlow Serverless Task Manager API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources and Methods
  TodosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !GetAtt TodoApi.RootResourceId
      PathPart: todos

  TodoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApi
      ParentId: !Ref TodosResource
      PathPart: '{id}'

  # CORS Options Methods
  TodosOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodosResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  TodoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # API Methods
  CreateTodoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodosResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFunction.Arn}/invocations'

  GetTodosMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodosResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodosFunction.Arn}/invocations'

  GetTodoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodoResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}/invocations'

  UpdateTodoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodoResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}/invocations'

  DeleteTodoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApi
      ResourceId: !Ref TodoResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}/invocations'

  # Lambda Permissions
  CreateTodoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTodoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${TodoApi}/*/*'

  GetTodosPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTodosFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${TodoApi}/*/*'

  GetTodoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTodoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${TodoApi}/*/*'

  UpdateTodoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateTodoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${TodoApi}/*/*'

  DeleteTodoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteTodoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${TodoApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateTodoMethod
      - GetTodosMethod
      - GetTodoMethod
      - UpdateTodoMethod
      - DeleteTodoMethod
      - TodosOptionsMethod
      - TodoOptionsMethod
    Properties:
      RestApiId: !Ref TodoApi
      StageName: prod

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'taskflow-frontend-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  FrontendUrl:
    Description: 'Frontend website URL'
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-FrontendUrl'

  DynamoDBTable:
    Description: 'DynamoDB table name'
    Value: !Ref TodoTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'