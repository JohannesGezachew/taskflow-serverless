AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless REST API for Todo Management'

Globals:
  Function:
    Timeout: 10  # Reduced timeout for free tier efficiency
    Runtime: python3.11
    MemorySize: 128  # Minimum memory for cost optimization
    Environment:
      Variables:
        TABLE_NAME: !Ref TodoTable

Resources:
  # DynamoDB Table (Free Tier Optimized)
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TodoItems
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      # Global Secondary Index for querying by userId
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      # Use provisioned billing for free tier (25 RCU/WCU free)
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      # Enable point-in-time recovery (optional, but good practice)
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: 
                  - !GetAtt TodoTable.Arn
                  - !Sub '${TodoTable}/index/*'

  # Lambda Functions
  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/
      Handler: create-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: post

  GetTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/
      Handler: get-todos.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetTodos:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: get

  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/
      Handler: get-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: get

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/
      Handler: update-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: put

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/
      Handler: delete-todo.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: delete

  # API Gateway
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # S3 Bucket for Frontend (Free Tier Optimized)
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'todo-app-frontend-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      # Lifecycle policy to manage costs (optional)
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  # S3 Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  FrontendUrl:
    Description: 'Frontend website URL'
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-FrontendUrl'

  DynamoDBTable:
    Description: 'DynamoDB table name'
    Value: !Ref TodoTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'